const [expenses, setExpenses] = useState([
    {id: 1, description:'aaa', amount: 10, category: 'Utilities'},
    {id: 2, description:'bbb', amount: 11, category: 'Utilities'},
    {id: 3, description:'ccc', amount: 12, category: 'Utilities'},
    {id: 4, description:'ddd', amount: 13, category: 'Utilities'},
  ])
    
  if(expenses.length === 0) return null;
  return(
    <>
    <div>
      <ExpenseList expenses={expenses} onDelete={(id) => setExpenses(expenses.filter((e) => e.id !== id))}/>
    </div>
    </>
  )
};
export default App;

import React from "react";

interface Expense {
  id: number;
  description: string;
  amount: number;
  category: string;
}

interface Props {
  expenses: Expense[];
  onDelete: (id: number) => void;
}

const ExpenseList = ({ expenses, onDelete }: Props) => {
  return (
    <table className="table table-bordered">
      <thead>
        <tr>
          <th>Description</th>
          <th>Amount</th>
          <th>Category</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        {expenses.map((expense) => (
          <tr key={expense.id}>
            <td>{expense.description}</td>
            <td>{expense.amount}</td>
            <td>{expense.category}</td>
            <td>
              <button
                className="btn btn-danger"
                onClick={() => onDelete(expense.id)}
              >
                Delete
              </button>
            </td>
          </tr>
        ))}
      </tbody>
      <tfoot>
        <tr>
          <td>Total</td>
          <td>${expenses.reduce((totalExpense, expense) => expense.amount + totalExpense, 0).toFixed(2)}</td>
          <td></td>
          <td></td>
        </tr>
      </tfoot>
    </table>
  );
};

export default ExpenseList;
